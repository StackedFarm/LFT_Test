<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Machine_LFT" Id="{dd0b1c07-301a-41cb-aaee-ff837cc40ded}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'OPC.UA.DA.StructuredType' := '1'}
FUNCTION_BLOCK FB_Machine_LFT EXTENDS FB_BaseMachine IMPLEMENTS I_Machine



VAR_IN_OUT PERSISTENT
	
	stInputs: ST_INPUTS_LFT;
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbHandshakeUpstream: 	FB_HandShake_TrayMovement();
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbHandshakeDownstream: 	FB_HandShake_TrayMovement();
	
END_VAR



VAR
	
	stTrayCurrent: ST_Tray;
	
	bIsFirstRun: BOOL := TRUE;
	bEnableIgnitionControl: BOOL := TRUE;
	bFirstInputScan: BOOL := TRUE;
	
	
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbServo_Lift: FB_Lift;
	 					
	

		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}														
	fbServo_LiftArm: FB_LiftArm;
		
	
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbSensor_PressSwitch:				FB_AutoSwitch();
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbSensor_Lift_Home:					FB_AutoSwitch();
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbSensor_Lift_Top:					FB_AutoSwitch();
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbSensor_Lift_Bottom:				FB_AutoSwitch();
	
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbSensor_LiftArm_Home:				FB_AutoSwitch();
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbSensor_LiftArm_Extended:			FB_AutoSwitch();
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbSensor_LiftArmVacuum:				FB_AutoSwitch();
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbSensor_LiftBrake_Left:			FB_AutoSwitch();
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbSensor_LiftBrake_Right:			FB_AutoSwitch();
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbAutoGreaser:						FB_AutoGreaser();
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbValve_Brake:						FB_Valve_ONOFF_woMonitoring(ValveID:= 'BKV', ValveDescr:= 'Brake Solenoid Valve' , Normal_State_NC_1_NO_0:= TRUE);
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbValve_Vacuum:						FB_Valve_ONOFF_woMonitoring(ValveID:= 'VPV', ValveDescr:= 'Vacuum Solenoid Valve' , Normal_State_NC_1_NO_0:= TRUE);
		
	
		
	bEnableMonitoringBrakes: BOOL := FALSE;
	nLeftBrake_Counter: INT := 0;
	nRightBrake_Counter: INT := 0;
	
	(**
	**		TESTING / SIMULATION VARIABLES
	**)
	
	tgStartSeq: R_TRIG;
	bExt_Step2: BOOL := FALSE;
	bExt_Step8: BOOL := FALSE;
	bPWR_CTRL AT %Q* : BOOL;
	bLOCK_CTRL AT %Q* : BOOL;
	
END_VAR

VAR PERSISTENT
													
	// Package all components into structure & array 
	// ST used for readability
	// Arrray used for iterability 
	stAllComponents: ST_LFTComponents;
	
		
	{attribute 'OPC.UA.DA' := '1'}
  	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	fbInterlocks: 			FB_InterlockManager;
	
	bInProgress: BOOL := FALSE;	//used as a flag to signify that we are in an operation
	
	// Sequences
	//fbSeq_MOVE: 	FB_SequenceMOVE;

	//aSeqs: ARRAY[1..10] OF FB_SequenceBase;	
	
	// Maglock
	
	
END_VAR



]]></Declaration>
    <Implementation>
      <ST><![CDATA[

IF bEnableMonitoringBrakes THEN
	IF fbSensor_LiftBrake_Left.getState() = E_DeviceState.ON THEN
		nLeftBrake_Counter := nLeftBrake_Counter + 1;
	END_IF
	
	IF fbSensor_LiftBrake_Right.getState() = E_DeviceState.ON THEN
		nRightBrake_Counter := nRightBrake_Counter + 1;
	END_IF
	
END_IF




IF bIsFirstRun THEN
	devices_init();
	devices_update();
	//sequence_init();
	bIsFirstRun := FALSE;
END_IF


devices_update();
(*
// Scan inputs from OPC
IF stInputs.bParamsInitialised AND bEnableIgnitionControl THEN
	IF bFirstInputScan THEN
		stInputs.stSequenceManager.Sequence_Selected := 1;
		stInputs.stSequenceManager.Sequence_Command := E_SequenceState.STOP;
		fbSequenceManager.selectSequence(Sequence := 1); // main sequence
		fbSequenceManager.stopSequence();
		bFirstInputScan := FALSE;
	END_IF
	scanOPCInputs(Inputs := stInputs ); // only scan if SCADA has set the imputs, otherwise keep persistent or initalised variables
END_IF

*)
// Sequence manager
// fbSeq_MOVE.populateSteps();
// aSeqs[1] := fbSeq_MOVE;
// fbSequenceManager(aSequences := aSeqs);

// Interlocks (make sure this is always called second last (so it overrides any target states set by the sequence manager)
IF GVL.bEnableInterlocks THEN
	interlocks();
END_IF

// Update devices
devices_update();
handshakes();
// sequence();


(**
**		TESTING / SIMULATION VARIABLES
**)

(*
tgStartSeq();
IF tgStartSeq.Q THEN
	fbSequenceManager.selectSequence(Sequence := 1);
	fbSequenceManager.startSequence();
END_IF
*)






]]></ST>
    </Implementation>
    <Method Name="devices_init" Id="{a68727a6-fad2-4558-8640-42f72ece9114}">
      <Declaration><![CDATA[METHOD devices_init : BOOL
VAR
	VarInfo : __SYSTEM.VAR_INFO;
	setVarID: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Hold References to devices in a structure and also an array
// A structure is useful where devices are accessed by name (handy with auto-complete and readability)
// The array is useful for when we want to iterate through all of the devices in the machine and apply a global command (i.e. disable all devices)

// Extract the function block instance name and insert it to each function block
// This enables us to share only the function block name over OPC for nested instances (i.e. sequences, interlock manager)
// The contents of each function block is shared over OPC within the Machine as per heirarchy
// When Ignition needs to retrieve details of devices at the interlock manager and sequence, it simply performs a lookup using the VarID as a key



VarInfo := __VARINFO(fbServo_Lift);
fbServo_Lift.setVarID(VarID := VarInfo.Symbol);

VarInfo := __VARINFO(fbServo_LiftArm);
fbServo_LiftArm.setVarID(VarID := VarInfo.Symbol);

VarInfo := __VARINFO(fbSensor_PressSwitch);
fbSensor_PressSwitch.setVarID(VarID := VarInfo.Symbol);

VarInfo := __VARINFO(fbSensor_Lift_Home);
fbSensor_Lift_Home.setVarID(VarID := VarInfo.Symbol);

VarInfo := __VARINFO(fbSensor_Lift_Top);
fbSensor_Lift_Top.setVarID(VarID := VarInfo.Symbol);

VarInfo := __VARINFO(fbSensor_Lift_Bottom);
fbSensor_Lift_Bottom.setVarID(VarID := VarInfo.Symbol);

VarInfo := __VARINFO(fbSensor_LiftArm_Home);
fbSensor_LiftArm_Home.setVarID(VarID := VarInfo.Symbol);

VarInfo := __VARINFO(fbSensor_LiftArm_Extended);
fbSensor_LiftArm_Extended.setVarID(VarID := VarInfo.Symbol);

VarInfo := __VARINFO(fbSensor_LiftArmVacuum);
fbSensor_LiftArmVacuum.setVarID(VarID := VarInfo.Symbol);

VarInfo := __VARINFO(fbSensor_LiftBrake_Left);
fbSensor_LiftBrake_Left.setVarID(VarID := VarInfo.Symbol);

VarInfo := __VARINFO(fbSensor_LiftBrake_Right);
fbSensor_LiftBrake_Right.setVarID(VarID := VarInfo.Symbol);

VarInfo := __VARINFO(fbAutoGreaser);
fbAutoGreaser.setVarID(VarID := VarInfo.Symbol);

VarInfo := __VARINFO(fbValve_Brake);
fbValve_Brake.setVarID(VarID := VarInfo.Symbol);

VarInfo := __VARINFO(fbValve_Vacuum);
fbValve_Vacuum.setVarID(VarID := VarInfo.Symbol);

aAllComponents[1]  :=  ADR(fbServo_LifT);
aAllComponents[2]  :=  ADR(fbServo_LiftArm);
aAllComponents[3]  :=  ADR(fbSensor_PressSwitch);
aAllComponents[4]  :=  ADR(fbSensor_Lift_Home );
aAllComponents[5]  :=  ADR(fbSensor_Lift_Top );
aAllComponents[6]  :=  ADR(fbSensor_LiftArm_Home  );
aAllComponents[7]  :=  ADR(fbSensor_LiftArm_Extended );
aAllComponents[8]  :=  ADR(fbSensor_LiftArmVacuum );
aAllComponents[9]  :=  ADR(fbSensor_LiftBrake_Left );
aAllComponents[10]  :=  ADR(fbSensor_LiftBrake_Right);
aAllComponents[11]  :=  ADR(fbAutoGreaser);
aAllComponents[12]  :=  ADR(fbValve_Brake);
aAllComponents[13]  :=  ADR(fbValve_Vacuum);
aAllComponents[14]  :=  ADR(fbHandshakeDownstream);
aAllComponents[15]  :=  ADR(fbHandshakeUpstream);



fbServo_LifT.setID(ID := 'Sample ID');									
fbServo_LiftArm.setID(ID := 'Sample ID');
fbSensor_PressSwitch.setID(ID := 'Sample ID');
fbSensor_Lift_Home.setID(ID := 'Sample ID');			
fbSensor_Lift_Top.setID(ID := 'Sample ID');
fbSensor_Lift_Bottom.setID(ID := 'Sample ID');
fbSensor_LiftArm_Home.setID(ID := 'Sample ID');
fbSensor_LiftArm_Extended.setID(ID := 'Sample ID');
fbSensor_LiftArmVacuum.setID(ID := 'Sample ID');
fbSensor_LiftBrake_Left.setID(ID := 'Sample ID');
fbSensor_LiftBrake_Right.setID(ID := 'Sample ID');
fbAutoGreaser.setID(ID := 'Sample ID');			
fbValve_Brake.setID(ID := 'Sample ID');		
fbValve_Vacuum.setID(ID := 'Sample ID');	
fbHandshakeDownstream.setID(ID := 'Downstream tray exchange handshake');
fbHandshakeUpstream.setID(ID := 'Upstream tray exchange handshake');



stAllComponents.fbServo_Lift 				:= ADR(fbServo_Lift);
stAllComponents.fbServo_LiftArm				:= ADR(fbServo_LiftArm);
stAllComponents.fbSensor_PressSwitch		:= ADR(fbSensor_PressSwitch);
stAllComponents.fbSensor_Lift_Home			:= ADR(fbSensor_Lift_Home);
stAllComponents.fbSensor_Lift_Top			:= ADR(fbSensor_Lift_Top);
stAllComponents.fbSensor_Lift_Bottom		:= ADR(fbSensor_Lift_Bottom);
stAllComponents.fbSensor_LiftArm_Home		:= ADR(fbSensor_LiftArm_Home);
stAllComponents.fbSensor_LiftArm_Extended	:= ADR(fbSensor_LiftArm_Extended);
stAllComponents.fbSensor_LiftArmVacuum		:= ADR(fbSensor_LiftArmVacuum);
stAllComponents.fbSensor_LiftBrake_Left		:= ADR(fbSensor_LiftBrake_Left);
stAllComponents.fbSensor_LiftBrake_Right	:= ADR(fbSensor_LiftBrake_Right);
stAllComponents.fbAutoGreaser				:= ADR(fbAutoGreaser);
stAllComponents.fbValve_Brake				:= ADR(fbValve_Brake);
stAllComponents.fbValve_Vacuum				:= ADR(fbValve_Vacuum);


// Note that the soil sensors have not been added to the stAllComponents or components array at this stage
// They are not being used in sequences or interlocks (at this stage)

nQtyComponents := 15;

devices_disable_All();




			




]]></ST>
      </Implementation>
    </Method>
    <Method Name="devices_update" Id="{1b7feb4b-cbbc-4c6a-b389-6856fb398443}">
      <Declaration><![CDATA[METHOD devices_update : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbServo_LifT();									
fbServo_LiftArm();
fbSensor_PressSwitch();
fbSensor_Lift_Home();			
fbSensor_Lift_Top();
fbSensor_Lift_Bottom();
fbSensor_LiftArm_Home();
fbSensor_LiftArm_Extended();
fbSensor_LiftArmVacuum();
fbSensor_LiftBrake_Left();
fbSensor_LiftBrake_Right();
fbAutoGreaser();			
fbValve_Brake();		
fbValve_Vacuum();	
fbHandshakeDownstream();
fbHandshakeUpstream();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{9859e583-9672-4a64-b482-d0b6ecf9ad87}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	ID: STRING;
	Description: STRING;

	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sID := ID;
sDescr := Description;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="handshakes" Id="{6deb0032-ab07-4713-b463-7cc1bc65b2d6}">
      <Declaration><![CDATA[METHOD handshakes : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
*
*				DOWNSTREAM HANDSHAKE (we are sending a tray downstream)
*)

(*

IF fbHandshakeDownstream.stTrayExchgangeOutput.eState = E_TrayExchangeState.IDLE AND (fbSensor_TrayEnd.getState() = E_DeviceState.ON) THEN
	fbHandshakeDownstream.stTrayExchangeInput.eState := E_TrayExchangeState.REQUESTED;
END_IF

IF fbHandshakeDownstream.stTrayExchgangeOutput.eState = E_TrayExchangeState.ACCEPTED THEN //AND bTrayisReady THEN
	fbHandshakeDownstream.stTrayExchangeInput.eState := E_TrayExchangeState.IN_PROGRESS;
END_IF

IF fbHandshakeDownstream.stTrayExchgangeOutput.eState = E_TrayExchangeState.COMPLETED THEN
	fbHandshakeDownstream.stTrayExchangeInput.stTrayOutgoing := stTrayCurrent;
END_IF



(*
*
*				UPSTREAM HANDSHAKE (we are receiving a tray)
*)


IF fbHandshakeUpstream.stTrayExchgangeOutput.eState = E_TrayExchangeState.REQUESTED  THEN // bTrayisReady THEN
	fbHandshakeUpstream.stTrayExchangeInput.eState := E_TrayExchangeState.ACCEPTED;
END_IF


IF fbHandshakeUpstream.stTrayExchgangeOutput.eState = E_TrayExchangeState.ACCEPTED THEN // AND bStartingtoMove THEN
	fbHandshakeUpstream.stTrayExchangeInput.eState := E_TrayExchangeState.IN_PROGRESS;
END_IF


IF fbHandshakeUpstream.stTrayExchgangeOutput.eState = E_TrayExchangeState.COMPLETED THEN
	stTrayCurrent := fbHandshakeUpstream.stTrayExchangeInput.stTrayOutgoing;
END_IF

*)




]]></ST>
      </Implementation>
    </Method>
    <Method Name="interlocks" Id="{59193bb1-61de-46c6-9e61-e4b5fd0dffc1}">
      <Declaration><![CDATA[METHOD interlocks : BOOL
VAR_INPUT
END_VAR


]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbInterlocks.init();

(*
fbInterlocks.update(
							Description:= 'Linear Actuator 1 Attempted to Move While Static Conveyor Running',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbLinAct_POP1), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  (fbStaticConv_POP1.getState() = E_DeviceState.RUNNING) OR (fbStaticConv_POP2.getState() = E_DeviceState.RUNNING)
										OR (fbStaticConv_POP3.getState() = E_DeviceState.RUNNING) OR (fbStaticConv_POP1.getState() = E_DeviceState.REVERSE) OR (fbStaticConv_POP2.getState() = E_DeviceState.REVERSE)
										OR (fbStaticConv_POP3.getState() = E_DeviceState.REVERSE),
							HoldSequence:=	FALSE);
							

fbInterlocks.update(
							Description:= 'Linear Actuator 2 Attempted to Move While Static Conveyor Running',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbLinAct_POP2), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  (fbStaticConv_POP1.getState() = E_DeviceState.RUNNING) OR (fbStaticConv_POP2.getState() = E_DeviceState.RUNNING)
										OR (fbStaticConv_POP3.getState() = E_DeviceState.RUNNING) OR (fbStaticConv_POP1.getState() = E_DeviceState.REVERSE) OR (fbStaticConv_POP2.getState() = E_DeviceState.REVERSE)
										OR (fbStaticConv_POP3.getState() = E_DeviceState.REVERSE),
							HoldSequence:=	FALSE);

fbInterlocks.update(
							Description:= 'Linear Actuator 3 Attempted to Move While Static Conveyor Running',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbLinAct_POP3), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  (fbStaticConv_POP1.getState() = E_DeviceState.RUNNING) OR (fbStaticConv_POP2.getState() = E_DeviceState.RUNNING)
										OR (fbStaticConv_POP3.getState() = E_DeviceState.RUNNING) OR (fbStaticConv_POP1.getState() = E_DeviceState.REVERSE) OR (fbStaticConv_POP2.getState() = E_DeviceState.REVERSE)
										OR (fbStaticConv_POP3.getState() = E_DeviceState.REVERSE),
							HoldSequence:=	FALSE);
							
							
fbInterlocks.update(
							Description:= 'Static Conveyor 1 Attemped to Move While POPs Are Moving',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbStaticConv_POP1), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  (fbLinAct_POP1.getState() = E_DeviceState.RUNNING) OR (fbLinAct_POP2.getState() = E_DeviceState.RUNNING)
										OR (fbLinAct_POP3.getState() = E_DeviceState.RUNNING) OR (fbLinAct_POP1.getState() = E_DeviceState.REVERSE) OR (fbLinAct_POP2.getState() = E_DeviceState.REVERSE)
										OR (fbLinAct_POP3.getState() = E_DeviceState.REVERSE),
							HoldSequence:=	FALSE);
							

fbInterlocks.update(
							Description:= 'Static Conveyor 2 Attemped to Move While POPs Are Moving',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbStaticConv_POP2), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  (fbLinAct_POP1.getState() = E_DeviceState.RUNNING) OR (fbLinAct_POP2.getState() = E_DeviceState.RUNNING)
										OR (fbLinAct_POP3.getState() = E_DeviceState.RUNNING) OR (fbLinAct_POP1.getState() = E_DeviceState.REVERSE) OR (fbLinAct_POP2.getState() = E_DeviceState.REVERSE)
										OR (fbLinAct_POP3.getState() = E_DeviceState.REVERSE),
							HoldSequence:=	FALSE);
							

fbInterlocks.update(
							Description:= 'Static Conveyor 3 Attemped to Move While POPs Are Moving',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbStaticConv_POP3), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  (fbLinAct_POP1.getState() = E_DeviceState.RUNNING) OR (fbLinAct_POP2.getState() = E_DeviceState.RUNNING)
										OR (fbLinAct_POP3.getState() = E_DeviceState.RUNNING) OR (fbLinAct_POP1.getState() = E_DeviceState.REVERSE) OR (fbLinAct_POP2.getState() = E_DeviceState.REVERSE)
										OR (fbLinAct_POP3.getState() = E_DeviceState.REVERSE),
							HoldSequence:=	FALSE);	

							
fbInterlocks.update(
							Description:= 'Static Conveyor 1 Attemped to Move When Tray Centre Actuators are Centred',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbStaticConv_POP1), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  (fbTrayCentre_POP1.getState() = E_DeviceState.EXTENDED) OR (fbTrayCentre_POP2.getState() = E_DeviceState.EXTENDED)
										OR (fbTrayCentre_POP3.getState() = E_DeviceState.EXTENDED),
							HoldSequence:=	FALSE);							
							
fbInterlocks.update(
							Description:= 'Static Conveyor 2 Attemped to Move When Tray Centre Actuators are Centred',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbStaticConv_POP2), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  (fbTrayCentre_POP1.getState() = E_DeviceState.EXTENDED) OR (fbTrayCentre_POP2.getState() = E_DeviceState.EXTENDED)
										OR (fbTrayCentre_POP3.getState() = E_DeviceState.EXTENDED),
							HoldSequence:=	FALSE);		
							
							
fbInterlocks.update(
							Description:= 'Static Conveyor 3 Attemped to Move When Tray Centre Actuators are Centred',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbStaticConv_POP3), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  (fbTrayCentre_POP1.getState() = E_DeviceState.EXTENDED) OR (fbTrayCentre_POP2.getState() = E_DeviceState.EXTENDED)
										OR (fbTrayCentre_POP3.getState() = E_DeviceState.EXTENDED),
							HoldSequence:=	FALSE);		
							
							
							
(* HANDSHAKING INTERLOCKS *)
							
fbInterlocks.update(
							Description:= 'Wait for tray RESQUESTED signal',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbStaticConv_POP1), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  ((fbSequenceManager.getCurrentSeq_ID() = E_SequenceList_POP.SEQ_EXTEND_CONVEY) OR
										(fbSequenceManager.getCurrentSeq_ID() = E_SequenceList_POP.SEQ_RETRACT_CONVEY)) AND
										fbHandshakeDownstream.stTrayExchgangeOutput.eState <> E_TrayExchangeState.IN_PROGRESS,
							HoldSequence:=	FALSE);		
							
							
fbInterlocks.update(
							Description:= 'Wait for tray RESQUESTED signal',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbStaticConv_POP2), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  ((fbSequenceManager.getCurrentSeq_ID() = E_SequenceList_POP.SEQ_EXTEND_CONVEY) OR
										(fbSequenceManager.getCurrentSeq_ID() = E_SequenceList_POP.SEQ_RETRACT_CONVEY)) AND
										fbHandshakeDownstream.stTrayExchgangeOutput.eState <> E_TrayExchangeState.IN_PROGRESS,
							HoldSequence:=	FALSE);		

fbInterlocks.update(
							Description:= 'Wait for tray RESQUESTED signal',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbStaticConv_POP3), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  ((fbSequenceManager.getCurrentSeq_ID() = E_SequenceList_POP.SEQ_EXTEND_CONVEY) OR
										(fbSequenceManager.getCurrentSeq_ID() = E_SequenceList_POP.SEQ_RETRACT_CONVEY)) AND
										fbHandshakeDownstream.stTrayExchgangeOutput.eState <> E_TrayExchangeState.IN_PROGRESS,
							HoldSequence:=	FALSE);									
							
fbInterlocks.update(
							Description:= 'Wait for tray RESQUESTED signal',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbLinAct_POP1), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  ((fbSequenceManager.getCurrentSeq_ID() = E_SequenceList_POP.SEQ_CONVEY_EXTEND) OR
										(fbSequenceManager.getCurrentSeq_ID() = E_SequenceList_POP.SEQ_CONVEY_RETRACT)) AND
										fbHandshakeDownstream.stTrayExchgangeOutput.eState <> E_TrayExchangeState.IN_PROGRESS,
							HoldSequence:=	FALSE);		

fbInterlocks.update(
							Description:= 'Wait for tray RESQUESTED signal',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbLinAct_POP2), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  ((fbSequenceManager.getCurrentSeq_ID() = E_SequenceList_POP.SEQ_CONVEY_EXTEND) OR
										(fbSequenceManager.getCurrentSeq_ID() = E_SequenceList_POP.SEQ_CONVEY_RETRACT)) AND
										fbHandshakeDownstream.stTrayExchgangeOutput.eState <> E_TrayExchangeState.IN_PROGRESS,
							HoldSequence:=	FALSE);									

fbInterlocks.update(
							Description:= 'Wait for tray RESQUESTED signal',
							InterlockType:= E_InterlockType.RunInterlock, 
							Subject_Device:= ADR(fbLinAct_POP3), 
							Subject_State:= E_DeviceState.IDLE, 
							Signal:=  ((fbSequenceManager.getCurrentSeq_ID() = E_SequenceList_POP.SEQ_CONVEY_EXTEND) OR
										(fbSequenceManager.getCurrentSeq_ID() = E_SequenceList_POP.SEQ_CONVEY_RETRACT)) AND
										fbHandshakeDownstream.stTrayExchgangeOutput.eState <> E_TrayExchangeState.IN_PROGRESS,
							HoldSequence:=	FALSE);		

*)
fbInterlocks.execute();
							
]]></ST>
      </Implementation>
    </Method>
    <Method Name="scanOPCInputs" Id="{4ab94a57-734f-492b-b7ca-b018517c8a45}">
      <Declaration><![CDATA[METHOD scanOPCInputs : BOOL
VAR_INPUT
	Inputs: ST_INPUTS_LFT;
END_VAR

VAR 
	nCurrenSeq_Temp: INT;
	nPrev_Seq: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
(*
			SEQUENCE CONTROL
*)



IF stInputs.stSequenceManager.Sequence_Selected <> fbSequenceManager.getCurrentSeq_ID() THEN // Selected sequence has been changed
	fbSequenceManager.stopSequence();
	devices_disable_All();
	fbSequenceManager.selectSequence(stInputs.stSequenceManager.Sequence_Selected);
	devices_enable_CurrSeq();
END_IF


IF stInputs.stSequenceManager.Sequence_Ack_Interlock THEN
	fbSequenceManager.acknowledgePause();
	stInputs.stSequenceManager.Sequence_Ack_Interlock := FALSE;
END_IF


CASE stInputs.stSequenceManager.Sequence_Command OF
	E_SequenceState.RUN:
		IF fbSequenceManager.getState() <> E_SequenceState.RUN THEN
			fbSequenceManager.startSequence();
			stInputs.stSequenceManager.Sequence_Command := E_SequenceState.WAIT;
		END_IF
	E_SequenceState.STOP:
		IF fbSequenceManager.getState() <> E_SequenceState.STOP THEN
			fbSequenceManager.stopSequence();
			stInputs.stSequenceManager.Sequence_Command := E_SequenceState.WAIT;
		END_IF
	E_SequenceState.HOLD:
		IF fbSequenceManager.getState() <> E_SequenceState.HOLD THEN
			fbSequenceManager.pauseSequence();
			stInputs.stSequenceManager.Sequence_Command := E_SequenceState.WAIT;
		END_IF
END_CASE

(*
(*
			POP ACTUATORS
*)

fbLinAct_POP1.setMode(Mode := stInputs.stLinAct_POP1.Mode);
IF fbLinAct_POP1.inManual() THEN
	fbLinAct_POP1.setCommand(StateTarget := stInputs.stLinAct_POP1.Command);
ELSE
	stInputs.stLinAct_POP1.Command := fbLinAct_POP1.getCommand();
END_IF


fbLinAct_POP2.setMode(Mode := stInputs.stLinAct_POP2.Mode);
IF fbLinAct_POP2.inManual() THEN
	fbLinAct_POP2.setCommand(StateTarget := stInputs.stLinAct_POP2.Command);
ELSE
	stInputs.stLinAct_POP2.Command := fbLinAct_POP2.getCommand();
END_IF

fbLinAct_POP3.setMode(Mode := stInputs.stLinAct_POP3.Mode);
IF fbLinAct_POP3.inManual() THEN
	fbLinAct_POP3.setCommand(StateTarget := stInputs.stLinAct_POP3.Command);
ELSE
	stInputs.stLinAct_POP3.Command := fbLinAct_POP3.getCommand();
END_IF


(*
			TRAY CENTRE ACTUATORS
*)

fbTrayCentre_POP1.setMode(Mode := stInputs.stTrayCentre_POP1.Mode);
IF fbTrayCentre_POP1.inManual() THEN
	fbTrayCentre_POP1.setCommand(StateTarget := stInputs.stTrayCentre_POP1.Command);
ELSE
	stInputs.stTrayCentre_POP1.Command := fbTrayCentre_POP1.getCommand();
END_IF

fbTrayCentre_POP2.setMode(Mode := stInputs.stTrayCentre_POP2.Mode);
IF fbTrayCentre_POP2.inManual() THEN
	fbTrayCentre_POP2.setCommand(StateTarget := stInputs.stTrayCentre_POP2.Command);
ELSE
	stInputs.stTrayCentre_POP2.Command := fbTrayCentre_POP2.getCommand();
END_IF

fbTrayCentre_POP3.setMode(Mode := stInputs.stTrayCentre_POP3.Mode);
IF fbTrayCentre_POP3.inManual() THEN
	fbTrayCentre_POP3.setCommand(StateTarget := stInputs.stTrayCentre_POP3.Command);
ELSE
	stInputs.stTrayCentre_POP3.Command := fbTrayCentre_POP3.getCommand();
END_IF



(*
			STATIC CONVEYORS
*)


fbStaticConv_POP1.setMode(Mode := stInputs.stStaticConv_POP1.Mode);
IF fbStaticConv_POP1.inManual() THEN
	fbStaticConv_POP1.setCommand(StateTarget := stInputs.stStaticConv_POP1.Command);
ELSE
	stInputs.stStaticConv_POP1.Command := fbStaticConv_POP1.getCommand();
END_IF
									
fbStaticConv_POP2.setMode(Mode := stInputs.stStaticConv_POP2.Mode);
IF fbStaticConv_POP2.inManual() THEN
	fbStaticConv_POP2.setCommand(StateTarget := stInputs.stStaticConv_POP2.Command);
ELSE
	stInputs.stStaticConv_POP2.Command := fbStaticConv_POP2.getCommand();
END_IF

fbStaticConv_POP3.setMode(Mode := stInputs.stStaticConv_POP3.Mode);
IF fbStaticConv_POP3.inManual() THEN
	fbStaticConv_POP3.setCommand(StateTarget := stInputs.stStaticConv_POP3.Command);
ELSE
	stInputs.stStaticConv_POP3.Command := fbStaticConv_POP3.getCommand();
END_IF													


*)
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sequence" Id="{682d83a0-ee3a-4a43-a046-60c8c29d9f33}">
      <Declaration><![CDATA[METHOD sequence : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*

IF (fbSequenceManager.getState() = E_SequenceState.COMPLETE) AND (fbHandshakeUpstream.stTrayExchgangeOutput.eState = E_TrayExchangeState.REQUESTED) AND NOT bInProgress THEN
	
	CASE ePOP_Type OF 
		E_POP_Type.EXTEND_CONVEY:
			fbSequenceManager.selectSequence(Sequence := E_SequenceList_POP.SEQ_EXTEND_CONVEY);
		E_POP_Type.CONVEY_EXTEND:
			fbSequenceManager.selectSequence(Sequence := E_SequenceList_POP.SEQ_CONVEY_EXTEND);
		E_POP_Type.RETRACT_CONVEY:
			fbSequenceManager.selectSequence(Sequence := E_SequenceList_POP.SEQ_RETRACT_CONVEY);
		E_POP_Type.CONVEY_RETRACT:
			fbSequenceManager.selectSequence(Sequence := E_SequenceList_POP.SEQ_RETRACT_CONVEY);
	END_CASE

	fbSequenceManager.startSequence();
	bInProgress := TRUE;
END_IF



IF (fbSequenceManager.getState() = E_SequenceState.COMPLETE) AND bInProgress THEN
	// return the pop conveyor back to resting condition
	CASE ePOP_Type OF 
		E_POP_Type.EXTEND_CONVEY:
			fbSequenceManager.selectSequence(Sequence := E_SequenceList_POP.SEQ_RETRACT);
		E_POP_Type.CONVEY_EXTEND:
			fbSequenceManager.selectSequence(Sequence := E_SequenceList_POP.SEQ_RETRACT);
		E_POP_Type.RETRACT_CONVEY:
			fbSequenceManager.selectSequence(Sequence := E_SequenceList_POP.SEQ_EXTEND);
		E_POP_Type.CONVEY_RETRACT:
			fbSequenceManager.selectSequence(Sequence := E_SequenceList_POP.SEQ_EXTEND);
	END_CASE
	fbSequenceManager.startSequence();
	bInProgress := FALSE;
END_IF

*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="sequence_init" Id="{41dd3da2-5c40-4f9d-8304-c735973b9623}">
      <Declaration><![CDATA[METHOD sequence_init : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*fbSeq_MOVE(devices := stAllComponents, bExt_1_Ret_0_Step2 := bExt_Step2, bExt_1_Ret_0_Step8 := bExt_Step8);
fbSeq_MOVE.populateSteps();
aSeqs[1] := fbSeq_MOVE;
*)
(*
fbSeq_RET_CONV(devices := stAllComponents);
fbSeq_CONV_EXT(devices := stAllComponents);
fbSeq_CONV_RET(devices := stAllComponents);
fbSeq_EXT(devices := stAllComponents);
fbSeq_RET(devices := stAllComponents);
*)


(*
fbSeqRND_DMMain(devices := stAllComponents);
fbSeqRND_DMCal(devices := stAllComponents);
fbSeqRND_DMFill(devices := stAllComponents);
fbSeqRND_DMDrain(devices := stAllComponents);
fbSeqRND_DMFlush(devices := stAllComponents);

fbSeqRND_DMMain.populateSteps();
fbSeqRND_DMCal.populateSteps();
fbSeqRND_DMFill.populateSteps();
fbSeqRND_DMDrain.populateSteps();
fbSeqRND_DMFlush.populateSteps();

aSeqs[1] := fbSeqRND_DMMain;
aSeqs[2] := fbSeqRND_DMCal;
aSeqs[3] := fbSeqRND_DMFill;
aSeqs[4] := fbSeqRND_DMDrain;
aSeqs[5] := fbSeqRND_DMFlush;


*)]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Machine_LFT">
      <LineId Id="12369" Count="1" />
      <LineId Id="12375" Count="1" />
      <LineId Id="12382" Count="2" />
      <LineId Id="12387" Count="1" />
      <LineId Id="12385" Count="1" />
      <LineId Id="12377" Count="0" />
      <LineId Id="12371" Count="3" />
      <LineId Id="11643" Count="1" />
      <LineId Id="11962" Count="0" />
      <LineId Id="11645" Count="2" />
      <LineId Id="12366" Count="0" />
      <LineId Id="11648" Count="13" />
      <LineId Id="11945" Count="0" />
      <LineId Id="11662" Count="1" />
      <LineId Id="12364" Count="0" />
      <LineId Id="11666" Count="0" />
      <LineId Id="11669" Count="10" />
      <LineId Id="11956" Count="3" />
      <LineId Id="11955" Count="0" />
      <LineId Id="12368" Count="0" />
      <LineId Id="11965" Count="0" />
      <LineId Id="11680" Count="1" />
      <LineId Id="11964" Count="0" />
      <LineId Id="11960" Count="1" />
      <LineId Id="11682" Count="6" />
      <LineId Id="10684" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine_LFT.devices_init">
      <LineId Id="535" Count="2" />
      <LineId Id="916" Count="0" />
      <LineId Id="542" Count="2" />
      <LineId Id="277" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="1118" Count="40" />
      <LineId Id="641" Count="10" />
      <LineId Id="918" Count="0" />
      <LineId Id="1115" Count="2" />
      <LineId Id="936" Count="0" />
      <LineId Id="964" Count="0" />
      <LineId Id="853" Count="1" />
      <LineId Id="1100" Count="13" />
      <LineId Id="872" Count="0" />
      <LineId Id="965" Count="1" />
      <LineId Id="934" Count="0" />
      <LineId Id="1085" Count="14" />
      <LineId Id="831" Count="0" />
      <LineId Id="968" Count="0" />
      <LineId Id="895" Count="0" />
      <LineId Id="892" Count="0" />
      <LineId Id="896" Count="0" />
      <LineId Id="673" Count="2" />
      <LineId Id="672" Count="0" />
      <LineId Id="975" Count="3" />
      <LineId Id="1041" Count="0" />
      <LineId Id="1069" Count="0" />
      <LineId Id="1071" Count="0" />
      <LineId Id="683" Count="0" />
      <LineId Id="682" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine_LFT.devices_update">
      <LineId Id="177" Count="14" />
      <LineId Id="172" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine_LFT.FB_init">
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine_LFT.handshakes">
      <LineId Id="6" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="74" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="67" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="28" Count="13" />
      <LineId Id="54" Count="1" />
      <LineId Id="61" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine_LFT.interlocks">
      <LineId Id="141" Count="0" />
      <LineId Id="557" Count="0" />
      <LineId Id="149" Count="6" />
      <LineId Id="625" Count="0" />
      <LineId Id="674" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="626" Count="0" />
      <LineId Id="628" Count="0" />
      <LineId Id="675" Count="7" />
      <LineId Id="627" Count="0" />
      <LineId Id="644" Count="0" />
      <LineId Id="683" Count="7" />
      <LineId Id="636" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="694" Count="0" />
      <LineId Id="696" Count="7" />
      <LineId Id="695" Count="0" />
      <LineId Id="645" Count="0" />
      <LineId Id="705" Count="8" />
      <LineId Id="617" Count="0" />
      <LineId Id="691" Count="0" />
      <LineId Id="714" Count="8" />
      <LineId Id="692" Count="0" />
      <LineId Id="734" Count="0" />
      <LineId Id="726" Count="7" />
      <LineId Id="723" Count="1" />
      <LineId Id="735" Count="6" />
      <LineId Id="725" Count="0" />
      <LineId Id="742" Count="1" />
      <LineId Id="745" Count="6" />
      <LineId Id="744" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="766" Count="3" />
      <LineId Id="759" Count="5" />
      <LineId Id="770" Count="1" />
      <LineId Id="758" Count="0" />
      <LineId Id="782" Count="1" />
      <LineId Id="785" Count="7" />
      <LineId Id="784" Count="0" />
      <LineId Id="794" Count="8" />
      <LineId Id="793" Count="0" />
      <LineId Id="772" Count="0" />
      <LineId Id="774" Count="7" />
      <LineId Id="773" Count="0" />
      <LineId Id="804" Count="8" />
      <LineId Id="803" Count="0" />
      <LineId Id="813" Count="0" />
      <LineId Id="816" Count="7" />
      <LineId Id="814" Count="1" />
      <LineId Id="693" Count="0" />
      <LineId Id="543" Count="1" />
      <LineId Id="147" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine_LFT.scanOPCInputs">
      <LineId Id="553" Count="11" />
      <LineId Id="566" Count="7" />
      <LineId Id="575" Count="4" />
      <LineId Id="829" Count="0" />
      <LineId Id="580" Count="3" />
      <LineId Id="830" Count="0" />
      <LineId Id="584" Count="3" />
      <LineId Id="831" Count="0" />
      <LineId Id="588" Count="1" />
      <LineId Id="867" Count="0" />
      <LineId Id="626" Count="3" />
      <LineId Id="1098" Count="1" />
      <LineId Id="1101" Count="4" />
      <LineId Id="1107" Count="6" />
      <LineId Id="1106" Count="0" />
      <LineId Id="1115" Count="5" />
      <LineId Id="1114" Count="0" />
      <LineId Id="1128" Count="0" />
      <LineId Id="1165" Count="2" />
      <LineId Id="1122" Count="0" />
      <LineId Id="1168" Count="0" />
      <LineId Id="1121" Count="0" />
      <LineId Id="1124" Count="3" />
      <LineId Id="1123" Count="0" />
      <LineId Id="1131" Count="5" />
      <LineId Id="1130" Count="0" />
      <LineId Id="1138" Count="5" />
      <LineId Id="1137" Count="0" />
      <LineId Id="1170" Count="4" />
      <LineId Id="1169" Count="0" />
      <LineId Id="1100" Count="0" />
      <LineId Id="1146" Count="5" />
      <LineId Id="808" Count="1" />
      <LineId Id="1153" Count="5" />
      <LineId Id="1164" Count="0" />
      <LineId Id="1159" Count="4" />
      <LineId Id="1152" Count="0" />
      <LineId Id="813" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine_LFT.sequence">
      <LineId Id="55" Count="1" />
      <LineId Id="5" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="30" Count="2" />
      <LineId Id="29" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="40" Count="8" />
      <LineId Id="39" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine_LFT.sequence_init">
      <LineId Id="46" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="62" Count="2" />
      <LineId Id="58" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="42" Count="3" />
      <LineId Id="36" Count="0" />
      <LineId Id="11" Count="3" />
      <LineId Id="30" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="16" Count="3" />
      <LineId Id="31" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>