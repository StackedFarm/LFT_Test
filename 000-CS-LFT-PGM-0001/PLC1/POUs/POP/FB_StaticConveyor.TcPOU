<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_StaticConveyor" Id="{e4a7fffb-ac44-4c2c-98a0-e136ed69031b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StaticConveyor EXTENDS FB_BaseDevice IMPLEMENTS I_Device

VAR
	// Instantiation config variables
	
	nIntervalDistance: INT;	// how long shoiuld the conveyor move per interval (this is refined during the calibration procedure and stored in abother variable)
	nGearRatio: INT;
	nAccelMax: INT;			// mm/s2
	nVelocityMax: INT;		// mm/s
	nVelocityJog: INT;		// mm/s
	tIntervalTimeFWD: TIME;
	tIntervalTimeREV: TIME;
	
	
	
	// Motion control variables
	nVelocityForward: INT;
	nVelocityReverse: INT;
	
	// Calibration position variables
	nIntervalActual: DINT; 	// (write a fuinction to determine these position limits)
	
	// Motion control function blocks
	mcAxis: 			AXIS_REF;
	//eSMState:			eMoveState;
	
	//eSMState:			eMoveState;
	eSMState: (INIT, ENABLE, FORWARD, FORWARD_SLOW, REVERSE, REVERSE_SLOW, STOP, ERROR, RESET);
	
	mcPower: 			MC_Power;
	mcPower_Outputs:	ST_McOutputs;
	
	mcReset: 			MC_Reset;
	mcReset_Outputs:	ST_McOutputs;
	
	mcStop:				MC_Stop;
	mcStop_Outputs:		ST_McOutputs;
	
	mcMoveRel: 			MC_MoveRelative;
	mcMoveRel_Outputs: 	ST_McOutputs;
	
	mcHome:				MC_Home;
	mcHome_Outputs:		ST_McOutputs;
	
	
	tgExecute: R_TRIG;
	tTimeout:	TIME := T#5S;
	fbTON_Timeout: TON := (PT := tTimeout, IN := FALSE);
END_VAR


VAR_INPUT
	bExecute: BOOL := FALSE;
	eMoveType: E_ConveyorMoveType;
	fbTrayDetectionSensor: FB_Sensor_OMRON_E3AS;
END_VAR

VAR_OUTPUT
	nErrorID: INT;
	bDone: BOOL := FALSE;
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* update the axis status at the beginning of each cycle *)
mcAxis();
tgExecute(CLK := bExecute);
fbTON_Timeout(PT := tTimeout);


IF eStateTarget <> eState AND bEnable OR eMode = E_DeviceMode.MANUAL THEN
	bExecute := TRUE;  // be execute is set to false during movements (allowing a midway change), this behaviour can be stopped if we set bExecite to false after the move is finished
	CASE eStateTarget OF 
		E_DeviceState.RUNNING:
			eMoveType := E_ConveyorMoveType.FORWARD;
		E_DeviceState.REVERSE:
			eMoveType := E_ConveyorMoveType.REVERSE;
		E_DeviceState.IDLE:
			eMoveType := E_ConveyorMoveType.STOP;
	END_CASE
END_IF


(* move axis using a state machine *)
CASE eSMState OF

	INIT :	(* initialisation *)
		(* initialize all function blocks *)
		mcMoveRel.Execute := FALSE;
		mcReset.Execute := FALSE;
		eSMState := ENABLE;

	ENABLE :
		mcPower.Enable := TRUE;
		mcPower.Enable_Positive := TRUE;
		mcPower.Enable_Negative := TRUE;
		IF tgExecute.Q THEN
			fbTON_Timeout.IN := TRUE;
			CASE eMoveType OF
				E_ConveyorMoveType.FORWARD:
					eSMState := FORWARD;
				E_ConveyorMoveType.FORWARD_SLOW:
					eSMState := FORWARD_SLOW;
				E_ConveyorMoveType.REVERSE:
					eSMState := REVERSE;
				E_ConveyorMoveType.REVERSE_SLOW:
					eSMState := REVERSE_SLOW;
				E_ConveyorMoveType.STOP:
					eSMState := STOP;
			END_CASE						
		ELSIF mcPower.Error THEN
			eSMState := ERROR;
		END_IF
		
		fbTON_Timeout.IN := FALSE;

	FORWARD :
		eState := E_DeviceState.STARTING;										
		// mcMoveRel.Velocity := nVelocityForward;		
		mcMoveRel.Distance := 2800;
		mcMoveRel.Velocity := 1000;			
		mcMoveRel.BufferMode := MC_Buffered;
		mcMoveRel.Execute := TRUE;
		IF mcMoveRel.Done THEN
			//mcMoveRel.Execute := FALSE;
			eState := E_DeviceState.RUNNING;
			//eSMState := ENABLE;
		ELSIF mcMoveRel.CommandAborted OR mcMoveRel.Error OR fbTON_Timeout.Q THEN
			eSMState := ERROR;
		END_IF

	FORWARD_SLOW :				
		eState := E_DeviceState.EXTENDING;						
		mcMoveRel.Velocity := nVelocityJog;			
		mcMoveRel.BufferMode := MC_Buffered;
		mcMoveRel.Execute := TRUE;
		IF mcMoveRel.Done THEN
			eState := E_DeviceState.EXTENDED;
			mcMoveRel.Execute := FALSE;
			eSMState := ENABLE;
		ELSIF mcMoveRel.CommandAborted OR mcMoveRel.Error OR fbTON_Timeout.Q THEN
			eSMState := ERROR;
		END_IF		
		
	REVERSE :			
		eState := E_DeviceState.STARTING;							
		mcMoveRel.Velocity := nVelocityReverse;			
		mcMoveRel.BufferMode := MC_Buffered;
		mcMoveRel.Execute := TRUE;
		IF mcMoveRel.Done THEN
			eState := E_DeviceState.REVERSE;
			mcMoveRel.Execute := FALSE;
			eSMState := ENABLE;
		ELSIF mcMoveRel.CommandAborted OR mcMoveRel.Error OR fbTON_Timeout.Q THEN
			eSMState := ERROR;
		END_IF
		

	REVERSE_SLOW :					
		eState := E_DeviceState.STARTING;						
		mcMoveRel.Velocity := nVelocityJog;			
		mcMoveRel.BufferMode := MC_Buffered;
		mcMoveRel.Execute := TRUE;
		IF mcMoveRel.Done THEN
			eState := E_DeviceState.REVERSE;
			mcMoveRel.Execute := FALSE;
			eSMState := ENABLE;
		ELSIF mcMoveRel.CommandAborted OR mcMoveRel.Error OR fbTON_Timeout.Q THEN
			eSMState := ERROR;
		END_IF		
		
	STOP :
		mcStop.Execute := TRUE;
		IF mcStop.Done THEN
			mcStop.Execute := FALSE;
			eSMState := ENABLE;
		END_IF


	ERROR :
		IF mcAxis.Status.Error THEN
			eSMState := RESET;			(* axis error requires reset *)
		ELSIF fbTON_Timeout.Q THEN
			// Raise an alarm that the auto switch was not reached
		ELSE
			eSMState := INIT;			(* function block errors don't need a reset *)
		END_IF
		

	RESET :
		mcReset.Execute := TRUE;
		IF mcReset.Done THEN
			eSMState := INIT;
		ELSIF mcReset.Error THEN
			eSMState := INIT; 			(* can't do anything here *)
		END_IF

END_CASE




// Execute the motion control function blocks 
mcPower(Axis := mcAxis, 
		Enable := mcPower.Enable, 
		Enable_Positive := mcPower.Enable_Positive, 
		Enable_Negative := mcPower.Enable_Negative, 
		Override := 100, 
		Status => mcPower_Outputs.Done, 
		Busy => mcPower_Outputs.Busy, 
		Active => mcPower_Outputs.Active, 
		Error => mcPower_Outputs.Error, 
		ErrorID => mcPower_Outputs.ErrorID);


mcMoveRel(Axis := mcAxis,
			Execute := mcMoveRel.Execute,
			Distance := mcMoveRel.Distance,
			Velocity := mcMoveRel.Velocity,
			Acceleration := mcMoveRel.Acceleration,
			Deceleration := mcMOveRel.Deceleration,
			Done => mcMoveRel_Outputs.Done,
			Busy => mcMoveRel_Outputs.Busy,
			Active => mcMoveRel_Outputs.Active,
			CommandAborted => mcMoveRel_Outputs.CommandAborted,
			Error => mcMoveRel_Outputs.Error,
			ErrorID => mcMoveRel_Outputs.ErrorID);
			
			
mcReset(Axis := mcAxis,
		Execute := mcReset.Execute,
		Done => mcReset_Outputs.Done,
		Busy => mcReset_Outputs.Busy,
		Error => mcReset_Outputs.Error,
		ErrorID => mcReset_Outputs.ErrorID);
		
mcStop(Axis := mcAxis,
		Execute := mcStop.Execute,
		Done => mcStop_Outputs.Done,
		Busy => mcStop_Outputs.Busy,
		Active => mcStop_Outputs.Active,
		CommandAborted => mcStop_Outputs.CommandAborted,
		Error => mcStop_Outputs.Error,
		ErrorId => mcStop_Outputs.ErrorID);

mcHome(Axis := mcAxis,
		Execute := mcHome.Execute,
		Done => mcHome_Outputs.Done,
		Busy => mcHome_Outputs.Busy,
		Active => mcHome_Outputs.Active,
		CommandAborted => mcHome_Outputs.CommandAborted,
		Error => mcHome_Outputs.Error,
		ErrorID => mcHome_Outputs.ErrorID);
		
			
]]></ST>
    </Implementation>
    <Method Name="calcVels" Id="{f39cdad7-d449-4c20-a933-e36ac50ce434}">
      <Declaration><![CDATA[METHOD calcVels : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nVelocityForward := nIntervalDistance / (TIME_TO_INT(tIntervalTimeFWD)/1000);
nVelocityReverse := nIntervalDistance / (TIME_TO_INT(tIntervalTimeREV)/1000);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{25ea5013-df2d-4cdd-88b0-a46fc4585411}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	IntervalDistance: INT;
	GearRatio: INT;
	AccelMax: INT;
	VelocityMax: INT;
	VelocityJog: INT;
	IntervalTimeFWD: TIME;
	IntervalTimeREV: TIME;
	
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[tIntervalTimeFWD := IntervalTimeFWD;
tIntervalTimeREV := IntervalTimeREV;

nGearRatio := GearRatio;
nAccelMax := AccelMax;
nVelocityMax := VelocityMax;
nVelocityJog := VelocityJog;
tIntervalTimeFWD := IntervalTimeFWD;
tIntervalTimeREV := IntervalTimeREV;

calcVels(); // calculate extend and retract velocities based on the specified action durations]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_StaticConveyor">
      <LineId Id="907" Count="3" />
      <LineId Id="1159" Count="0" />
      <LineId Id="1163" Count="0" />
      <LineId Id="1174" Count="9" />
      <LineId Id="1161" Count="1" />
      <LineId Id="912" Count="27" />
      <LineId Id="941" Count="7" />
      <LineId Id="950" Count="0" />
      <LineId Id="1189" Count="0" />
      <LineId Id="1188" Count="0" />
      <LineId Id="951" Count="11" />
      <LineId Id="964" Count="12" />
      <LineId Id="978" Count="13" />
      <LineId Id="993" Count="55" />
      <LineId Id="1087" Count="10" />
      <LineId Id="1059" Count="27" />
      <LineId Id="52" Count="0" />
    </LineIds>
    <LineIds Name="FB_StaticConveyor.calcVels">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_StaticConveyor.FB_init">
      <LineId Id="7" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="31" Count="2" />
      <LineId Id="35" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>