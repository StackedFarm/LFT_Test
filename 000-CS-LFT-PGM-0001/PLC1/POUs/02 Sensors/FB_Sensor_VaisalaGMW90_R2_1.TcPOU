<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Sensor_VaisalaGMW90_R2_1" Id="{db10d21e-45b8-43e0-aed4-cec00049eaab}" SpecialFunc="None">
    <Declaration><![CDATA[(*
	Handles communication and control of a Vaisala GMW90 environment sensor (Temp, Humidity, CO2)
*)
{attribute 'OPC.UA.DA.StructuredType' := '1'}
FUNCTION_BLOCK FB_Sensor_VaisalaGMW90_R2_1 EXTENDS FB_BaseDevice

VAR_INPUT
	nModbusUnitID: UINT; // slave ID of the sensor
END_VAR

VAR_IN_OUT
	fbModbusManager : FB_ModbusManager;
	
END_VAR

VAR_OUTPUT
	{attribute 'OPC.UA.DA' := '1'}
	rCO2 : REAL;
	{attribute 'OPC.UA.DA' := '1'}
	rTemperature : REAL;
	{attribute 'OPC.UA.DA' := '1'}
	rHumidity : REAL;

END_VAR

VAR PERSISTENT 
	tDataRefresh: TIME := T#1m;
	tWaitForReadings: TIME := T#17S;
	tWaitForTurnOff: TIME := T#100MS;
	tMsgTimeout: TIME := T#2S;
	bEnableComms: BOOL := FALSE;
END_VAR

VAR
	
	
	bReading: BOOL := FALSE;
	bFirstRun: BOOL := TRUE;
	bResetTtimer: BOOL := FALSE;
	
	nWordsToRead_values : UINT := 1; // ( CO2;  Temp;  Hum)
	nWordsToRead_errors : UINT := 2; // The GMW90 has 16 bits for error codes
	
	nAdrFirstReg_CO2 : WORD := 256; // THE GMW90 stores its int value for CO2 value in register 256
	nAdrFirstReg_Hum : WORD := 257; // THE GMW90 stores its int value for CO2 value in register 256
	nAdrFirstReg_Temp : WORD := 258; // THE GMW90 stores its int value for CO2 value in register 256
	
	nAdrFirstReg_Error : WORD := 513; // the GMW90 stores its error codes in 0513 register
	
	stModRequest_ReadCO2: ST_Modbus_ReadRequest;
	stModRequest_ReadHum: ST_Modbus_ReadRequest;
	stModRequest_ReadTemp: ST_Modbus_ReadRequest;
	
	stModRequest_ReadError: ST_Modbus_ReadRequest;
	
	bVaisalaPowerCtr AT %Q*: BOOL;
	
	
	eSMState: (WAIT, ON, READ, TURN_OFF) := WAIT;
	
	fbTON_WaitForReadings: TON := (PT := tWaitForReadings, IN := FALSE);
	fbTON_WaitForTurnOff: TON := (PT := tWaitForReadings, IN := FALSE);
	fbTON_DataRefresh: TON := (PT := tDataRefresh, IN := FALSE);
	fbTON_MsgTimeout: TON := (PT := tMsgTimeout, IN := FALSE);
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbTON_WaitForTurnOff(PT := tWaitForTurnOff);
fbTON_WaitForReadings(PT := tWaitForReadings);
fbTON_DataRefresh(PT := tDataRefresh);
fbTON_MsgTimeout(PT := tMsgTimeout);

bVaisalaPowerCtr := TRUE;		// THis is a remnant of the power cycle workaround implemented in R7, keep this line here until we rewire room 7

IF bEnableComms THEN 
	IF bFirstRun THEN
		fbTON_DataRefresh(IN := TRUE);
		bFirstRun := FALSE;
		init_ModbusRequests();
	END_IF
	
	IF bResetTtimer THEN
		fbTON_DataRefresh(IN := TRUE);
		bResetTtimer := FALSE;
	END_IF
	
	(*
	IF nModbusUnitID <> 0 THEN
		bEnableComms := TRUE;
	END_IF
	*)
	
	CASE eSMState OF
		WAIT:
			fbTON_DataRefresh(IN := TRUE, PT := tDataRefresh);
			IF fbTON_DataRefresh.Q THEN
				eSMState := ON;
				fbTON_DataRefresh(IN := FALSE);
			END_IF
		
		ON:
			fbTON_WaitForReadings(PT := tWaitForReadings, IN := TRUE);
			//bVaisalaPowerCtr := TRUE;
			IF fbTON_WaitForReadings.Q THEN
				eSMState := READ;
			END_IF
			
		READ:
			IF fbTON_WaitForReadings.Q THEN
				fbTON_WaitForReadings(IN := FALSE);
				fbModbusManager.addRequest_Read_Vaisala(ReadRequest := ADR(stModRequest_ReadCO2));
				fbTON_MsgTimeout(IN := TRUE);
			END_IF
			
			IF stModRequest_ReadCO2.bRequestCompleted OR fbTON_MsgTimeout.Q THEN
				stModRequest_ReadCO2.bRequestCompleted := FALSE;
				fbTON_MsgTimeout( IN := FALSE);
				fbTON_WaitForTurnOff(IN := TRUE);
			END_IF
			
			IF fbTON_WaitForTurnOff.Q THEN
				//bVaisalaPowerCtr := FALSE;
				eSMState := WAIT;
				fbTON_WaitForTurnOff(IN := FALSE);
			END_IF
			
	END_CASE
	
	rCO2 := 			stModRequest_ReadCO2.ReadRegsVals[1]; 
	rHumidity :=  		stModRequest_ReadCO2.ReadRegsVals[2] / 100.00; 
	rTemperature := 	stModRequest_ReadCO2.ReadRegsVals[3] / 100.00; 
	
	
	(*
	
	IF fbTON_DataRefresh.Q AND bEnableComms THEN
		
		IF NOT fbTON_WaitForReadings.Q AND NOT bReading THEN
			fbTON_WaitForReadings(IN := TRUE);
			bVaisalaPowerCtr := TRUE;				// Turn the vaisala unit on
			bReading := TRUE;
		END_IF
			
		IF fbTON_WaitForReadings.Q THEN			// We have waited for the unit to power on, now we read
			fbModbusManager.addRequest_Read_Vaisala(ReadRequest := ADR(stModRequest_ReadCO2));
			fbTON_WaitForReadings(IN := FALSE);
		END_IF
		
		IF (stModRequest_ReadCO2.bRequestCompleted = TRUE) THEN // Request has finished, we turn power off after a set amount of time
			stModRequest_ReadCO2.bRequestCompleted := FALSE;
			fbTON_WaitForTurnOff(IN := TRUE);
		END_IF
		IF fbTON_WaitForTurnOff.Q THEN
			bVaisalaPowerCtr := FALSE;
			fbTON_WaitForTurnOff(IN := FALSE);
			fbTON_DataRefresh(IN := FALSE); 
			bResetTtimer := TRUE;
			fbTON_WaitForReadings(IN := FALSE);
			bReading := FALSE;
		END_IF
	END_IF
		
		
	
		//fbModbusManager.addRequest_Read(ReadRequest := ADR(stModRequest_ReadError));
		
		//fbModbusManager.addRequest_Read_Vaisala(ReadRequest := ADR(stModRequest_ReadCO2));
		//fbModbusManager.addRequest_Read_Vaisala(ReadRequest := ADR(stModRequest_ReadCO2));
		
		
	*)
END_IF
	
	
	
]]></ST>
    </Implementation>
    <Method Name="init_ModbusRequests" Id="{4f636ca9-3f60-4569-9083-7d1c97afdea1}">
      <Declaration><![CDATA[METHOD init_ModbusRequests : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stModRequest_ReadCO2.SlaveAddress := nModbusUnitID;			
stModRequest_ReadCO2.AdrFirstSlaveRegisterRead := nAdrFirstReg_CO2;
stModRequest_ReadCO2.QtyWordsToRead := 3;				
stModRequest_ReadCO2.bRequestAccepted := FALSE;
stModRequest_ReadCO2.bRequestCompleted := FALSE;
stModRequest_ReadCO2.ReadRegsVals := GVL.ModbusEmptyBuffer;

(*
stModRequest_ReadHum.SlaveAddress := nModbusUnitID;			
stModRequest_ReadHum.AdrFirstSlaveRegisterRead := nAdrFirstReg_Hum;
stModRequest_ReadHum.QtyWordsToRead := 1;				
stModRequest_ReadHum.bRequestAccepted := FALSE;
stModRequest_ReadHum.bRequestCompleted := FALSE;
stModRequest_ReadHum.ReadRegsVals := GVL.ModbusEmptyBuffer;

stModRequest_ReadTemp.SlaveAddress := nModbusUnitID;			
stModRequest_ReadTemp.AdrFirstSlaveRegisterRead := nAdrFirstReg_Temp;
stModRequest_ReadTemp.QtyWordsToRead := 1;				
stModRequest_ReadTemp.bRequestAccepted := FALSE;
stModRequest_ReadTemp.bRequestCompleted := FALSE;
stModRequest_ReadTemp.ReadRegsVals := GVL.ModbusEmptyBuffer;
*)

stModRequest_ReadError.SlaveAddress := nModbusUnitID;			
stModRequest_ReadError.AdrFirstSlaveRegisterRead := nAdrFirstReg_Error;
stModRequest_ReadError.QtyWordsToRead := nWordsToRead_errors;			
stModRequest_ReadError.bRequestAccepted := FALSE;
stModRequest_ReadError.bRequestCompleted := FALSE;
stModRequest_ReadError.ReadRegsVals := GVL.ModbusEmptyBuffer;


]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Sensor_VaisalaGMW90_R2_1">
      <LineId Id="378" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="521" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="256" Count="1" />
      <LineId Id="184" Count="0" />
      <LineId Id="481" Count="0" />
      <LineId Id="475" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="484" Count="0" />
      <LineId Id="486" Count="1" />
      <LineId Id="489" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="490" Count="1" />
      <LineId Id="493" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="494" Count="2" />
      <LineId Id="501" Count="3" />
      <LineId Id="506" Count="1" />
      <LineId Id="505" Count="0" />
      <LineId Id="515" Count="0" />
      <LineId Id="517" Count="1" />
      <LineId Id="526" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="519" Count="0" />
      <LineId Id="516" Count="0" />
      <LineId Id="508" Count="1" />
      <LineId Id="511" Count="1" />
      <LineId Id="510" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="483" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="513" Count="1" />
      <LineId Id="477" Count="1" />
      <LineId Id="185" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="402" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="362" Count="1" />
      <LineId Id="365" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="372" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="376" Count="1" />
      <LineId Id="395" Count="1" />
      <LineId Id="405" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="353" Count="1" />
      <LineId Id="348" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="251" Count="2" />
      <LineId Id="202" Count="1" />
      <LineId Id="398" Count="0" />
      <LineId Id="523" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Sensor_VaisalaGMW90_R2_1.init_ModbusRequests">
      <LineId Id="6" Count="5" />
      <LineId Id="42" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="4" />
      <LineId Id="27" Count="0" />
      <LineId Id="36" Count="5" />
      <LineId Id="34" Count="1" />
      <LineId Id="12" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="21" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>