<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_RS485_CardWrite" Id="{613073bb-c28e-4ac1-93f4-32a61a28aa89}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_RS485_CardWrite

VAR
	fbSdoWrite: FB_EcCoESdoWrite;
	
	// Inputs
	sNetID: 		T_AmsNetId := '192.168.1.31.2.1'; 	// This is a string that contains the AMS network identifier of the EtherCAT master device.
	nSlaveAddr: 	UINT := 1005; 						// Fixed address of the EtherCAT slave to which the SDO upload command should be sent.
	nSubIndex:		BYTE := 16#11;								// Sub-index of the object that is to be read.
	nIndex:			WORD := 16#8000;								// Index of the object that is to be read.
	//pDstBuf:		DWORD; 								// The address (pointer) of the receive buffer
	nValue:			BYTE;
	cbBufLen: 		UDINT; 								// The maximum available buffer size for the data to be read, in bytes.
	bExecute: 		BOOL; 								// The block is activated by a rising edge at this input.
	tTimeout:		TIME := DEFAULT_ADS_TIMEOUT;
	
	// Outputs
	bBusy: 			BOOL; // This output is set when the function block is activated and remains set until an acknowledgement is received.
	bError:			BOOL; // This output is set up after the bBusy output has been reset if there has been an error in transmission of the command.
	nErrId:			UDINT; // Supplies the ADS error code associated with the most recently executed command if the bError output is set.
	
	
	bBool: BOOL := TRUE;
	
	// Index 16#8000 Sub 16#11 for Baudrate (7 - 19,200, 8 - 38,400) - use Byte type
	// Index 16#8000 Sub 16#15 for Baudrate (3 - 8N1, 11 - 8N2) 

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* fbSdoRead(sNetId:=sNetId, nSlaveAddr:=nSlaveAddr, nIndex:=nIndex, nSubIndex:=nSubIndex, pDstBuf:=ADR(rxBuffer), cbBufLen:=SIZEOF(rxBuffer), bExecute:=bExecute);
bError:=fbSdoRead.bError;
nErrId:=fbSdoRead.nErrId;
bExecute := FALSE;
*)


fbSdoWrite();

IF NOT fbSdoWrite.bBusy THEN
	bExecute:=FALSE;
IF NOT bError THEN
	(* write successful *)
	bError := FALSE;
	nErrId := 0;
ELSE
	(* write failed *)
	bError := fbSdoWrite.bError;
	nErrId := fbSdoWrite.nErrId;
END_IF
	fbSdoWrite(bExecute:=FALSE);
END_IF]]></ST>
    </Implementation>
    <Method Name="isBusy" Id="{5aa85a7b-4037-420e-8bd4-0452c4bda848}">
      <Declaration><![CDATA[METHOD isBusy : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bBusy THEN
	isBusy := TRUE;
ELSE
	isBusy := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="writeBaud" Id="{5a7f8993-0894-4fc1-835c-7afe050b3926}">
      <Declaration><![CDATA[METHOD writeBaud : BOOL
VAR_INPUT
	Baudrate: DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bBusy THEN
	nIndex := 16#8000;
	nSubIndex := 16#11;
	
	CASE Baudrate OF
		300:
			nValue := 1;
		600:
			nValue := 2;
		1200:
			nValue := 3;
		2400:
			nValue := 4;
		4800:
			nValue := 5;
		9600:
			nValue := 6;
		19200:
			nValue := 7;
		38400:
			nValue := 8;
		57600:
			nValue := 9;
		115200:
			nValue := 9;
	END_CASE
	
	bExecute := TRUE;
	
	fbSdoWrite(
			sNetId :=		sNetId,
			nSlaveAddr :=	nSlaveAddr,
			nIndex :=		nIndex,
			nSubIndex :=	nSubIndex,
			pSrcBuf :=		ADR(nValue),
			cbBufLen :=		SIZEOF(nValue),
			bExecute :=		bExecute
);
	writeBaud := TRUE;
ELSE
	writeBaud := FALSE;
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="writeDataFrame" Id="{85375a7c-f643-4b4c-ac82-603b503ff0b8}">
      <Declaration><![CDATA[METHOD writeDataFrame : BOOL
VAR_INPUT
	Dataframe: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bBusy THEN
	nIndex := 16#8000;
	nSubIndex := 16#15;
	
	IF Dataframe = '7E1' THEN
		nValue := 1;
	ELSIF Dataframe = '7O1' THEN
		nValue := 2;
	ELSIF Dataframe = '8N1' THEN
		nValue := 2;
	ELSIF Dataframe = '8E1' THEN
		nValue := 2;
	ELSIF Dataframe = '8O1' THEN
		nValue := 2;
	ELSIF Dataframe = '7E2' THEN
		nValue := 2;
	ELSIF Dataframe = '7O2' THEN
		nValue := 2;
	ELSIF Dataframe = '8N2' THEN
		nValue := 2;
	ELSIF Dataframe = '8E2' THEN
		nValue := 2;
	ELSIF Dataframe = '8O2' THEN
		nValue := 2;
	ELSE
		writeDataFrame := FALSE;
	END_IF

	bExecute := TRUE;
	
	fbSdoWrite(
			sNetId :=		sNetId,
			nSlaveAddr :=	nSlaveAddr,
			nIndex :=		nIndex,
			nSubIndex :=	nSubIndex,
			pSrcBuf :=		ADR(nValue),
			cbBufLen :=		SIZEOF(nValue),
			bExecute :=		bExecute
	);
	writeDataFrame := TRUE;
ELSE
	writeDataFrame := FALSE;
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="writeInitRequest" Id="{b44b359d-a69c-4ec5-88a7-5d30423b444e}">
      <Declaration><![CDATA[METHOD writeInitRequest : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bBusy THEN
	nIndex := 16#7000;
	nSubIndex := 16#3;
	bBool := TRUE;
	bExecute := TRUE;
	
	fbSdoWrite(
			sNetId :=		sNetId,
			nSlaveAddr :=	nSlaveAddr,
			nIndex :=		nIndex,
			nSubIndex :=	nSubIndex,
			pSrcBuf :=		ADR(bBool),
			cbBufLen :=		SIZEOF(bBool),
			bExecute :=		bExecute
	);
	writeInitRequest := TRUE;
ELSE
	writeInitRequest := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="writeTxRequest" Id="{6bb20600-7e38-4f93-9540-47b7ec497b85}">
      <Declaration><![CDATA[METHOD writeTxRequest : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bBusy THEN
	nIndex := 16#7000;
	nSubIndex := 16#1;
	bBool := TRUE;
	bExecute := TRUE;
	
	fbSdoWrite(
			sNetId :=		sNetId,
			nSlaveAddr :=	nSlaveAddr,
			nIndex :=		nIndex,
			nSubIndex :=	nSubIndex,
			pSrcBuf :=		ADR(bBool),
			cbBufLen :=		SIZEOF(bBool),
			bExecute :=		bExecute
	);
	writeTxRequest := TRUE;
ELSE
	writeTxRequest := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_RS485_CardWrite">
      <LineId Id="49" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="115" Count="12" />
      <LineId Id="114" Count="0" />
    </LineIds>
    <LineIds Name="FB_RS485_CardWrite.isBusy">
      <LineId Id="5" Count="4" />
    </LineIds>
    <LineIds Name="FB_RS485_CardWrite.writeBaud">
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="28" Count="8" />
      <LineId Id="25" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="17" Count="6" />
      <LineId Id="16" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="53" Count="0" />
      <LineId Id="45" Count="7" />
      <LineId Id="44" Count="0" />
      <LineId Id="41" Count="2" />
      <LineId Id="7" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_RS485_CardWrite.writeDataFrame">
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="48" Count="4" />
      <LineId Id="39" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="63" Count="6" />
      <LineId Id="62" Count="0" />
      <LineId Id="71" Count="4" />
      <LineId Id="61" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="78" Count="7" />
      <LineId Id="77" Count="0" />
      <LineId Id="41" Count="2" />
      <LineId Id="7" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_RS485_CardWrite.writeInitRequest">
      <LineId Id="6" Count="17" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_RS485_CardWrite.writeTxRequest">
      <LineId Id="9" Count="17" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>