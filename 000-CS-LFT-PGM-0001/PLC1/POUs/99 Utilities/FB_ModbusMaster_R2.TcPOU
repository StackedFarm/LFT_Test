<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ModbusMaster_R2" Id="{b397f7c5-12aa-42b0-9cb3-c1c7f53fb0f6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModbusMaster_R2

VAR
	bFirstRun: BOOL := TRUE;
	
	MB: ModbusRtuMaster_KL6x22B;
	
	nReadRegsVals: POINTER TO ARRAY[1..10] OF WORD;
	nWriteRegVals: ARRAY[1..10] OF WORD;
	
	bRequestFinshed : POINTER TO BOOL;
		
	nSlaveAddress : BYTE;
	nQtyWordsToRead : WORD;
	nQtyWordsToWrite : WORD;
	nAdrFirstSlaveRegisterRead : WORD;
	nAdrFirstSlaveRegisterWrite : WORD;
	nTimeout : TIME := T#1S;
	
	// State Machine
	eState: (RESET, WAIT, READ_TRIG, READ, WRITE_TRIG, WRITE) := WAIT;
	bBusy: BOOL;
	
	//eOperationType: (READ_OP, WRITE_OP, READWRITE_OP);
	eOperationType: E_AccessType;
	fbTrigger : R_TRIG;
	
		
	
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbTrigger();
MB();







CASE eState OF
	

	WAIT :
		MB.ReadRegs(Execute := FALSE);
        MB.WriteRegs(Execute := FALSE);
		
		IF fbTrigger.Q THEN
			IF eOperationType = E_AccessType.WRITE THEN
				eState := WRITE_TRIG;
			ELSIF eOperationType = E_AccessType.READ THEN
				eState := READ_TRIG;
			END_IF
		END_IF
		
		
		
		
	READ_TRIG : 
		
		 MB.ReadRegs(
			UnitID:= nSlaveAddress, 
			Quantity:= nQtyWordsToRead, 
			MBAddr:= nAdrFirstSlaveRegisterRead, 
			cbLength:= nQtyWordsToRead * 2,//SIZEOF(nReadRegsVals), 
			pMemoryAddr:= ADR(nReadRegsVals^), 
			Execute:= TRUE, 
			Timeout:= nTimeout );
		
		
		IF NOT MB.BUSY THEN 
			MB.ReadRegs(Execute := FALSE );
			bBusy := TRUE;
			IF MB.Error THEN 
				eState := READ;           // handle errors 
			ELSE 
				eState := READ; // [...]               // keep going 
			END_IF
		END_IF

		
		
	READ :
	
		IF NOT MB.BUSY OR MB.Error THEN
			eState := WAIT;
			bRequestFinshed^ := TRUE;
			bBusy := FALSE;
			fbTrigger.CLK := FALSE;
			
		END_IF
	

		
	WRITE_TRIG :
			
		MB.UnitID:= nSlaveAddress;
		MB.Quantity:=1;
		MB.MBAddr:= nAdrFirstSlaveRegisterWrite;
		MB.cbLength:= nQtyWordsToWrite * 2;
		MB.pMemoryAddr:= ADR(nWriteRegVals);
		MB.Execute:= TRUE;
		MB.Timeout:= nTimeout;
		MB.WriteSingleRegister();

			
		IF NOT MB.BUSY THEN 
			//MB.WriteRegs(Execute := FALSE );
			MB.Execute := FALSE;
			bBusy := TRUE;
			IF MB.Error THEN 
				eState := WRITE;           				// handle errors 
			ELSE 
				eState := WRITE;			            // keep going 
			END_IF
		END_IF

	
	WRITE :
		IF NOT MB.BUSY OR MB.Error THEN
			eState := WAIT;
			bRequestFinshed^ := TRUE;
			bBusy := FALSE;
			fbTrigger.CLK := FALSE;
			
		END_IF

END_CASE]]></ST>
    </Implementation>
    <Method Name="Error" Id="{0b1a05fb-1c77-491f-be2e-cdab2d44ffac}">
      <Declaration><![CDATA[METHOD Error : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Error := MB.Error; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{62c21f07-a1ab-4085-aca6-57275bc1d7b0}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="isBusy" Id="{f97dff07-51e6-42eb-b6a7-78a28eeedbc8}">
      <Declaration><![CDATA[METHOD isBusy : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[isBusy := bBusy;]]></ST>
      </Implementation>
    </Method>
    <Method Name="readRegs" Id="{2410a195-f86d-4fcc-a538-12bbb1fcaf60}">
      <Declaration><![CDATA[METHOD readRegs : BOOL
VAR_INPUT
	ReadRequest: POINTER TO ST_Modbus_ReadRequest;
END_VAR

VAR_OUTPUT
	bRequestAccepted: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = WAIT THEN
	eOperationType := E_AccessType.READ;
	nReadRegsVals := ADR(ReadRequest^.ReadRegsVals);
	nSlaveAddress := UINT_TO_BYTE(ReadRequest^.SlaveAddress);
	nQtyWordsToRead := UINT_TO_WORD(ReadRequest^.QtyWordsToRead);
	nAdrFirstSlaveRegisterRead := UINT_TO_WORD(ReadRequest^.AdrFirstSlaveRegisterRead);
	fbTrigger.CLK := TRUE;
	bRequestAccepted := TRUE;
	bBusy := TRUE;
	bRequestFinshed := ADR(ReadRequest^.bRequestCompleted);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="writeReg" Id="{323f8444-9a27-4c2a-9eb2-1055599afc4c}">
      <Declaration><![CDATA[METHOD writeReg : BOOL
VAR_INPUT
	WriteRegVal: WORD;
	SlaveAddress : UINT;
	AdrFirstSlaveRegisterWrite : UINT;
	bRequestCompleted : POINTER TO BOOL;
	
	WriteRequest: ST_Modbus_WriteRequest;
END_VAR

VAR_OUTPUT
	bRequestAccepted: BOOL := FALSE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* IF eState = WAIT THEN
	eOperationType := E_AccessType.WRITE;
	//nWriteRegVals[0] := WriteRegVal;
	nWriteRegVals[1] := WriteRegVal;
	nWriteRegVals[1] := WriteRequest.
	nSlaveAddress := UINT_TO_BYTE(SlaveAddress);
	nQtyWordsToWrite := 1;
	nAdrFirstSlaveRegisterWrite := UINT_TO_BYTE(AdrFirstSlaveRegisterWrite);
	bRequestAccepted := TRUE;
	bRequestFinshed := bRequestCompleted;
	fbTrigger.CLK := TRUE;
	eState := WRITE_TRIG;
	
END_IF
*) 

// This needs to be re written to suit ST requests]]></ST>
      </Implementation>
    </Method>
    <Method Name="writeRegs" Id="{cd5c7caf-285d-4ca6-95da-88e747c47429}">
      <Declaration><![CDATA[METHOD writeRegs : BOOL
VAR_INPUT

	
	WriteRequest: POINTER TO ST_Modbus_WriteRequest;

END_VAR

VAR_OUTPUT
	bRequestAccepted: BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = WAIT THEN
	eOperationType := E_AccessType.WRITE;
	nWriteRegVals := WriteRequest^.WriteRegVals;
	nSlaveAddress := UINT_TO_BYTE(WriteRequest^.SlaveAddress);
	nQtyWordsToWrite := UINT_TO_WORD(WriteRequest^.QtyWordsToWrite);
	nAdrFirstSlaveRegisterWrite := UINT_TO_WORD(WriteRequest^.AdrFirstSlaveRegisterWrite);
	bRequestFinshed := ADR(WriteRequest^.bRequestCompleted);	
	fbTrigger.CLK := TRUE;
	bRequestAccepted := TRUE;
	
	eState := WRITE_TRIG;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ModbusMaster_R2">
      <LineId Id="1238" Count="0" />
      <LineId Id="1466" Count="1" />
      <LineId Id="1469" Count="1" />
      <LineId Id="1473" Count="0" />
      <LineId Id="1465" Count="0" />
      <LineId Id="1376" Count="0" />
      <LineId Id="1239" Count="1" />
      <LineId Id="1389" Count="1" />
      <LineId Id="1241" Count="2" />
      <LineId Id="1370" Count="0" />
      <LineId Id="1246" Count="6" />
      <LineId Id="1422" Count="1" />
      <LineId Id="1253" Count="0" />
      <LineId Id="1255" Count="1" />
      <LineId Id="1385" Count="0" />
      <LineId Id="1260" Count="28" />
      <LineId Id="1378" Count="0" />
      <LineId Id="1289" Count="2" />
      <LineId Id="1424" Count="0" />
      <LineId Id="1293" Count="1" />
      <LineId Id="1306" Count="21" />
      <LineId Id="1329" Count="5" />
      <LineId Id="1379" Count="0" />
      <LineId Id="1335" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusMaster_R2.Error">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusMaster_R2.FB_init">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusMaster_R2.isBusy">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusMaster_R2.readRegs">
      <LineId Id="55" Count="10" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusMaster_R2.writeReg">
      <LineId Id="21" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="57" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="122" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusMaster_R2.writeRegs">
      <LineId Id="22" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="74" Count="2" />
      <LineId Id="31" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="24" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>