<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_SequenceMOVE" Id="{6a88934f-c2b0-496c-8fef-40b01518dbd4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SequenceMOVE EXTENDS FB_SequenceBase



VAR_IN_OUT
	devices: ST_LFTComponents;
	
	bExt_1_Ret_0_Step2: BOOL;
	bExt_1_Ret_0_Step8: BOOL;
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{7e528dcc-e7ff-466f-b0b2-de5e737d138a}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
		Here we set the order of things to command, what the commands should be, and also how much time to allow during and between steps
		Every component listed below becomes 'Enabled' at each step
*)
sSequenceName:= 'LFT Move Sequence';
sSequenceDescription := 'Performs a LFT Cycle of picking up a tray and placing a tray';
bSequentional_1_Flood_0 := TRUE;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="populateSteps" Id="{1e8d3b61-d63e-48cc-bf86-c4222d71bedc}">
      <Declaration><![CDATA[METHOD populateSteps : ST_SequenceStep
VAR_INPUT
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
		Here we set the order of things to command, what the commands should be, and also how much time to allow during and between steps
		Every component listed below becomes 'Enabled' at each step
*)

Step1.Device := devices.fbServo_LiftArm;
Step1.Command := E_DeviceState.RETRACTED;
Step1.StepMinDuration := T#0S;
Step1.DelayUntilNextStep := T#0S;
Step1.WaitForAction := FALSE;
aSequenceSteps[1] :=   Step1;

IF bExt_1_Ret_0_Step2 THEN
	Step2.Command := E_DeviceState.EXTENDED;
ELSE
	Step2.Command := E_DeviceState.RETRACTED;
END_IF

Step2.Device := devices.fbServo_Lift;
Step2.StepMinDuration := T#0S;
Step2.DelayUntilNextStep := T#0S;
Step2.WaitForAction := FALSE;
aSequenceSteps[2] :=   Step2;


Step3.Device := devices.fbServo_LiftArm;
Step3.Command := E_DeviceState.EXTENDED;
Step3.StepMinDuration := T#0S;
Step3.DelayUntilNextStep := T#0S;
Step3.WaitForAction := TRUE;
aSequenceSteps[3] :=   Step3;

Step4.Device := devices.fbValve_Vacuum;
Step4.Command := E_DeviceState.OPEN;
Step4.StepMinDuration := T#0S;
Step4.DelayUntilNextStep := T#0S;
Step4.WaitForAction := FALSE;
aSequenceSteps[4] :=   Step4;


Step5.Device := devices.fbSensor_LiftArmVacuum;
Step5.Command := E_DeviceState.ON;
Step5.StepMinDuration := T#0S;
Step5.DelayUntilNextStep := T#0S;
Step5.WaitForAction := TRUE;
aSequenceSteps[5] :=   Step5;

Step6.Device := devices.fbServo_Lift;
Step6.Command := E_DeviceState.EXTENDED;
Step6.StepMinDuration := T#0S;
Step6.DelayUntilNextStep := T#0S;
Step6.WaitForAction := FALSE;
aSequenceSteps[6] :=   Step6;


Step7.Device := devices.fbServo_LiftArm;
Step7.Command := E_DeviceState.RETRACTED;
Step7.StepMinDuration := T#0S;
Step7.DelayUntilNextStep := T#0S;
Step7.WaitForAction := TRUE;
aSequenceSteps[7] :=   Step7;


IF bExt_1_Ret_0_Step8 THEN
	Step8.Command := E_DeviceState.EXTENDED;
ELSE
	Step8.Command := E_DeviceState.RETRACTED;
END_IF

Step8.Device := devices.fbServo_Lift;
Step8.StepMinDuration := T#0S; 
Step8.DelayUntilNextStep := T#0S;
Step8.WaitForAction := FALSE;
aSequenceSteps[8] :=   Step8;

Step9.Device := devices.fbServo_LiftArm;
Step9.Command := E_DeviceState.EXTENDED;
Step9.StepMinDuration := T#0S; 
Step9.DelayUntilNextStep := T#0S;
Step9.WaitForAction := FALSE;
aSequenceSteps[9] :=   Step9;

Step10.Device := devices.fbValve_Vacuum;
Step10.Command := E_DeviceState.RETRACTED;
Step10.StepMinDuration := T#0S; 
Step10.DelayUntilNextStep := T#0S;
Step10.WaitForAction := FALSE;
aSequenceSteps[10] :=   Step10;


Step11.Device := devices.fbSensor_LiftArmVacuum;
Step11.Command := E_DeviceState.OFF;
Step11.StepMinDuration := T#0S; 
Step11.DelayUntilNextStep := T#0S;
Step11.WaitForAction := TRUE;
aSequenceSteps[11] :=   Step11;


nNumberSequenceSteps := 14;  // use this number to limit the number of operations
updateVarIDs();

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SequenceMOVE">
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_SequenceMOVE.FB_init">
      <LineId Id="10" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="97" Count="0" />
    </LineIds>
    <LineIds Name="FB_SequenceMOVE.populateSteps">
      <LineId Id="472" Count="3" />
      <LineId Id="600" Count="6" />
      <LineId Id="698" Count="0" />
      <LineId Id="697" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="699" Count="0" />
      <LineId Id="702" Count="0" />
      <LineId Id="700" Count="0" />
      <LineId Id="709" Count="0" />
      <LineId Id="705" Count="3" />
      <LineId Id="607" Count="0" />
      <LineId Id="613" Count="29" />
      <LineId Id="716" Count="0" />
      <LineId Id="643" Count="1" />
      <LineId Id="717" Count="0" />
      <LineId Id="646" Count="3" />
      <LineId Id="688" Count="0" />
      <LineId Id="692" Count="0" />
      <LineId Id="718" Count="3" />
      <LineId Id="650" Count="0" />
      <LineId Id="722" Count="0" />
      <LineId Id="651" Count="0" />
      <LineId Id="653" Count="17" />
      <LineId Id="723" Count="0" />
      <LineId Id="672" Count="11" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>